(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3073],{47727:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/article/web/queue-in-js",function(){return t(36849)}])},36849:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return L}});var i=t(85893),s=t(67294),r=t(9008),d=t.n(r),o=t(92817),l=t(12424),c=t(34830),u=t(44594),a=t(70136);class h{constructor(n){this.workerLen=n??3,this.list=[],this.worker=Array(this.workerLen)}*executionFunc(n,e,...t){let i=this;yield e.call(...t).then(function(){i.worker[n]=void 0,i.run()})}addList(n){for(let e of n)this.list.unshift(e)}run(){let n=[];for(let e=0;e<this.workerLen;e++){let t=this.list.length;!this.worker[e]&&t>0&&(this.worker[e]=this.executionFunc(e,...this.list[t-1]),n.push(e),this.list.pop())}for(let e of n)this.worker[e].next()}}let{Title:x,Paragraph:p}=o.default,f=new h;var j=function(n){let[e,t]=(0,s.useState)([{id:"1",endTime:3,status:0},{id:"2",endTime:9,status:0},{id:"3",endTime:12,status:0},{id:"4",endTime:5,status:0},{id:"5",endTime:7,status:0},{id:"6",endTime:1,status:0}]),[r,d]=(0,s.useState)([]),[o,l]=(0,s.useState)(void 0),[h,j]=(0,s.useState)(!1);function m(n){return n.status=1,t(n=>[...n]),new Promise((e,i)=>{setTimeout(()=>{n.status=2,t(n=>[...n]);let i=[];d(e=>i=[...e,n.id]),6===i.length&&l(void 0),e()},1e3*n.endTime)})}return(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(x,{level:2,children:"代码演示"}),(0,i.jsx)(p,{children:"共有6个任务，每个任务过一定时间后完成。任务执行完成后执行下一个任务，最多有3个任务在执行。"}),(0,i.jsx)("div",{className:"text-right mb-[16px]",children:h?(0,i.jsx)(u.ZP,{type:"primary",danger:!0,disabled:o,onClick:function(n){t(e.map(n=>(n.status=0,n))),j(!1),d([])},children:"重置任务"}):(0,i.jsx)(u.ZP,{type:"primary",onClick:function(n){l(!0),j(!0);let t=e.map((n,e)=>[m,void 0,n]);f.addList(t),f.run()},children:"开始任务"})}),(0,i.jsx)(a.Z,{size:"middle",bordered:!0,columns:[{title:"任务ID",dataIndex:"id",width:"33%"},{title:"执行时间（s）",dataIndex:"endTime",width:"33%"},{title:"执行状态",dataIndex:"status",width:"33%",render(n,e,t){switch(n){case 0:return(0,i.jsx)(c.Z,{children:"未执行"});case 1:return(0,i.jsx)(c.Z,{color:"#f50",children:"执行中"});case 2:return(0,i.jsx)(c.Z,{color:"#87d068",children:"执行完毕"})}}}],dataSource:e,rowKey:"id",pagination:!1}),(0,i.jsxs)("p",{className:"py-[16px] px-0",children:[(0,i.jsx)("b",{children:"已完成任务："}),0===r.length?(0,i.jsx)(c.Z,{children:"无"}):r.map((n,e)=>(0,i.jsxs)(c.Z,{color:e%2==0?"magenta":"purple",children:["任务",n]},n))]})]})},m=t(11151);function w(n){let e={code:"code",pre:"pre",...(0,m.a)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class Queue {\n  constructor(workerLen) {\n    this.workerLen = workerLen ?? 3;         // 同时执行的任务数\n    this.list = [];                          // 任务队列\n    this.worker = new Array(this.workerLen); // 正在执行的任务\n  }\n\n  /**\n   * 执行一个任务\n   * @param { number } index\n   * @param { Function } fn - 执行的函数\n   * @param { Array } args - 传递给执行函数的参数\n   */\n  *executionFunc(index, fn, ...args) {\n    const _this = this;\n\n    yield fn.call(...args)\n      .then(function() {\n        // 任务执行完毕后，再次分配任务并执行任务\n        _this.worker[index] = undefined;\n        _this.run();\n      });\n  }\n\n  /**\n   * 添加到任务队列\n   * @param { Array<any[]> } list: 任务队列\n   */\n  addList(list) {\n    for (const item of list) {\n      this.list.unshift(item);\n    }\n  }\n\n  // 分配并执行任务\n  run() {\n    const runIndex = [];\n\n    for (let i = 0; i < this.workerLen; i++) {\n      const len = this.list.length;\n\n      if (!this.worker[i] && len > 0) {\n        // 需要执行的任务\n        this.worker[i] = this.executionFunc(i, ...this.list[len - 1]);\n\n        runIndex.push(i);\n\n        // 从任务队列内删除任务\n        this.list.pop();\n      }\n    }\n\n    // 执行任务\n    for (const index of runIndex) {\n      this.worker[index].next();\n    }\n  }\n}\n"})})}function k(n={}){let{wrapper:e}={...(0,m.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(w,{...n})}):w(n)}function g(n){let e={code:"code",pre:"pre",...(0,m.a)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// 延迟执行的函数\nfunction sleep(id, time) {\n  console.log('开始id', id);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log('结束id', id);\n      resolve();\n    }, time * 1000);\n  });\n}\n\nconst queue = new Queue();\n\n// 添加到任务队列\nqueue.addList([\n  [sleep, undefined, '0001', 3],\n  [sleep, undefined, '0002', 5],\n  [sleep, undefined, '0003', 8],\n  [sleep, undefined, '0004', 1],\n  [sleep, undefined, '0005', 12],\n  [sleep, undefined, '0006', 8],\n  [sleep, undefined, '0007', 2],\n  [sleep, undefined, '0008', 10]\n]);\n\n// 执行任务\nqueue.run();\n"})})}function T(n={}){let{wrapper:e}={...(0,m.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(g,{...n})}):g(n)}function v(n){let e={code:"code",pre:"pre",...(0,m.a)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"开始id 0001\n开始id 0002\n开始id 0003\n结束id 0001\n开始id 0004\n结束id 0004\n开始id 0005\n结束id 0002\n开始id 0006\n结束id 0003\n开始id 0007\n结束id 0007\n开始id 0008\n结束id 0006\n结束id 0005\n结束id 0008\n"})})}function _(n={}){let{wrapper:e}={...(0,m.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(v,{...n})}):v(n)}let{Title:y,Paragraph:Z}=o.default;var b=function(n){return(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(y,{children:"用JS实现多个任务并行执行的队列"}),(0,i.jsx)(y,{level:2,children:"使用场景"}),(0,i.jsx)(Z,{children:"今天在开发时，碰到了这么一个需求：需要上传多个视频文件；每个文件的上传在新线程内执行；同时最多有三个上传任务在执行； 当一个任务执行完毕，执行下一个任务。这个需求就是并行执行队列内的任务。"}),(0,i.jsx)(Z,{children:"为了能够满足要求，需要知道可以同时执行的任务数、任务队列、正在执行的任务。当一个任务执行完毕后，需要分配下一个执行的任务。"}),(0,i.jsx)(y,{level:2,children:"代码实现"}),(0,i.jsx)(Z,{children:"首先定义一个类："}),(0,i.jsx)(k,{}),(0,i.jsx)(Z,{children:"定义一个延迟执行的异步函数，并执行任务，测试代码是否满足需求："}),(0,i.jsx)(T,{}),(0,i.jsx)(Z,{children:"在控制台上会输出："}),(0,i.jsx)(_,{}),(0,i.jsx)(Z,{children:"可以看到，开始时执行了三个任务；每当有任务执行完毕，就会执行下一个任务。这样就满足了并行执行队列内的任务的需求。"}),(0,i.jsx)(j,{})]})};function L(n){return(0,i.jsxs)(s.Fragment,{children:[(0,i.jsxs)(d(),{children:[(0,i.jsx)("title",{children:"用JS实现多个任务并行执行的队列"}),(0,i.jsx)("meta",{name:"keywords",content:"前端, js, javascript, typescript, node"}),(0,i.jsx)("meta",{name:"description",content:"用JS实现多个任务并行执行的队列"})]}),(0,i.jsx)(b,{})]})}},11035:function(n,e,t){"use strict";var i=t(85893),s=t(73935),r=t(39332),d=t(57140),o=t(44594),l=t(84669),c=t(85486),u=t(76467),a=t(45212),h=t.n(a);let{BackTop:x}=d.default;e.Z=function(n){let e=(0,r.useRouter)();return[(0,i.jsxs)("div",{className:h().main,children:[n.goBack?(0,i.jsx)("div",{className:"mb-[16px] text-right",children:(0,i.jsxs)(o.ZP,{onClick:function(n){e.push("/")},children:[(0,i.jsx)(c.Z,{className:"mr-[6px]"}),"返回"]})}):null,n?.children]},"main"),n?.goToTop?(0,i.jsx)(u.default,{children:"object"==typeof document?(0,s.createPortal)((0,i.jsx)(x,{type:"primary",icon:(0,i.jsx)(l.Z,{}),title:"返回顶部",tabIndex:0,role:"button","aria-label":"返回顶部"}),document.body):null},"backTop"):null]}},12424:function(n,e,t){"use strict";var i=t(85893),s=t(11035);e.Z=function(n){return(0,i.jsx)(s.Z,{goToTop:!0,goBack:!0,children:n.children})}},45212:function(n){n.exports={main:"main_main__IZXSv",goToTop:"main_goToTop__Py8c8"}}},function(n){n.O(0,[4594,2409,3005,5809,5203,4946,3325,2888,9774,179],function(){return n(n.s=47727)}),_N_E=n.O()}]);